name: Test and Build Workflow
# This workflow is triggered on pull requests to master or a opendistro release branch
on:
  pull_request:
    branches:
      - main
      - opendistro-*
      - plugin-dev
  push:
    branches:
      - main
      - opendistro-*
      - plugin-dev

jobs:
  build:
    # Job name
    name: Build Asynchronous Search
    # This job runs on Linux. TODO Make it work for other OS distributions
    runs-on: ubuntu-latest
    steps:
      # This step uses the checkout Github action: https://github.com/actions/checkout
      - name: Checkout Branch
        uses: actions/checkout@v2
      # This step uses the setup-java Github action: https://github.com/actions/setup-java
      - name: Set Up JDK 14
        uses: actions/setup-java@v1
        with:
          java-version: 14
      - name: Build with Gradle
        run: ./gradlew build
      - name: Pull and Run Docker for security tests
        run: |
          plugin=`ls build/distributions/*.zip`
          version=`echo $plugin|awk -F- '{print $4}'| cut -d. -f 1-3`
          plugin_version=`echo $plugin|awk -F- '{print $4}'| cut -d. -f 1-4`
          echo $version
          cd ..
          if docker pull opendistroforelasticsearch/opendistroforelasticsearch:$version
          then
          echo "FROM opendistroforelasticsearch/opendistroforelasticsearch:$version" >> Dockerfile
          echo "RUN if [ -d /usr/share/elasticsearch/plugins/opendistro-asynchronous-search ]; then /usr/share/elasticsearch/bin/elasticsearch-plugin remove opendistro-asynchronous-search; fi" >> Dockerfile
          echo "RUN yum -y update \ && yum -y groupinstall "Development Tools" \ && yum install -y unzip glibc.x86_64 cmake \ && yum clean all" >> Dockerfile
          echo "RUN git clone --recursive --branch security-enabled-it https://github.com/opendistro-for-elasticsearch/asynchronous-search.git /usr/share/elasticsearch/asynchronous-search" >> Dockerfile
          echo "RUN cd /usr/share/elasticsearch/" >> Dockerfile
          echo "ADD asynchronous-search/build/distributions/opendistro-asynchronous-search-$plugin_version.zip /tmp/" >> Dockerfile
          echo "RUN /usr/share/elasticsearch/bin/elasticsearch-plugin install --batch file:/tmp/opendistro-asynchronous-search-$plugin_version.zip" >> Dockerfile
          docker build -t odfe-asynchronous-search:test .
          echo "imagePresent=true" >> $GITHUB_ENV
          else
          echo "imagePresent=false" >> $GITHUB_ENV
          fi
      - name: Run Docker Image
        if: env.imagePresent == 'true'
        run: |
          cd ..
          docker run -p 9200:9200 -d -p 9600:9600 -e "discovery.type=single-node" odfe-asynchronous-search:test
          sleep 90
      - name: Run asynchronous search Test
        if: env.imagePresent == 'true'
        run: |
          security=`curl -XGET https://localhost:9200/_cat/plugins?v -u admin:admin --insecure |grep opendistro_security|wc -l`
          if [ $security -gt 0 ]
          then
            echo "Security plugin is available. Running tests in security mode"
            ./gradlew :integTest -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200 -Dtests.clustername="docker-cluster" -Dhttps=true -Duser=admin -Dpassword=admin
          else
            echo "Security plugin is NOT available. Skipping tests as they are already ran part of ./gradlew build"
          fi
      - name: Upload failed logs
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: logs
          path: build/testclusters/integTest-*/logs/*
      - name: Create Artifact Path
        run: |
          mkdir -p asynchronous-search-artifacts
          cp ./build/distributions/*.zip asynchronous-search-artifacts     
      - name: Uploads coverage
        uses: codecov/codecov-action@v1.2.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
      # This step uses the upload-artifact Github action: https://github.com/actions/upload-artifact
      - name: Upload Artifacts
        uses: actions/upload-artifact@v1
        with:
          name: asynchronous-search-plugin
          path: asynchronous-search-artifacts
